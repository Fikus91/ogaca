
DEBUT(PAR_LOT='NON');

from scipy.optimize import fmin,brent,fmin_cobyla

#test of fmin (minimize )
def rosen(x):
  """The Rosenbrock function"""
  return sum(100.0*(x[1:]-x[:-1]**2.0)**2.0 + (1-x[:-1])**2.0)

x0 = [1.3, 0.7, 0.8, 1.9, 1.2]
xopt = fmin(rosen, x0, xtol=1e-8)
print xopt


#test of brent (minimise for scalaire)
def power(x):
                             return (x-4)**4+5*x**2;
                             
(a,b,c,d)=brent(power,brack=[0,1],full_output=True);
print "xmin value"
print a
print "fmin value"
print b
print "nb iter"
print c
print "nb eval"
print d

#test of fmin_cobyla
def simpleobj(x):
                             return x[0]**2+x[1]**2;
def simpleconstrain(x):
                             return (x[0]**2+x[1]**2)-3;

print "cobyla"
out=fmin_cobyla(simpleobj, [0.0, 0.1], [simpleconstrain],)
print "out value"
print out
print "obj value"
print simpleobj(out)
print "constrain value"
print simpleconstrain(out)

#test of fmin_cobyla with a real aster probleme

#ici commence le calcul classique de plaque de code aster
ACIER=DEFI_MATERIAU(ELAS=_F(E=210000000000.0,
                            NU=0.3,
                            RHO=7800.0,),);

ACIER150=DEFI_MATERIAU(ELAS=_F(E=150000000000.0,
                               NU=0.3,
                               RHO=7800.0,),);

MAIL=LIRE_MAILLAGE(FORMAT='MED',);

MODE=AFFE_MODELE(MAILLAGE=MAIL,
                 AFFE=_F(TOUT='OUI',
                         PHENOMENE='MECANIQUE',
                         MODELISATION='DKT',),);

MATE=AFFE_MATERIAU(MAILLAGE=MAIL,
                   AFFE=_F(TOUT='OUI',
                           MATER=ACIER150,),);

pl125mic=AFFE_CARA_ELEM(MODELE=MODE,
                        COQUE=_F(GROUP_MA='plaque',
                                 EPAIS=0.000125,),);
bloq=AFFE_CHAR_MECA(MODELE=MODE,
                    DDL_IMPO=(_F(GROUP_NO='supportz',
                                 DZ=0.0,),
                              _F(GROUP_NO='supportx',
                                 DX=0.0,),
                              _F(GROUP_NO='supporty',
                                 DY=0.0,),),);

forcoq=AFFE_CHAR_MECA(MODELE=MODE,
                      FORCE_COQUE=_F(TOUT='OUI',
                                     FZ=-1.8,),);

PP=AFFE_CHAR_MECA(MODELE=MODE,
                  PESANTEUR=_F(GRAVITE = 9.81,DIRECTION = (0,0,-1),GROUP_MA='plaque'),
                  INFO=2,);


listins=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=_F(JUSQU_A=1.0,
                                     NOMBRE=2,),);

fmult=DEFI_FONCTION(NOM_PARA='INST',VALE=(0.0,0.0,
                          1.0,1.0,
                          ),);


#this is the elements that need to be iterate on each calculation
def astconst(x):
                             tracbord=AFFE_CHAR_MECA(MODELE=MODE,
                                                     FORCE_NODALE=(_F(GROUP_NO='tracXP',
                                                                      FX=x[0],),
                                                                   _F(GROUP_NO='tracXM',
                                                                      FX=-1.0*x[0],),
                                                                   _F(GROUP_NO='tracYP',
                                                                      FY=x[1],),
                                                                   _F(GROUP_NO='tracYM',
                                                                      FY=-1.0*x[1],),),);
                             
                             resu2=STAT_NON_LINE(MODELE=MODE,
                                                 CHAM_MATER=MATE,
                                                 CARA_ELEM=pl125mic,
                                                 EXCIT=(_F(CHARGE=bloq,),
                                                        _F(CHARGE=tracbord,
                                                           FONC_MULT=fmult,),
                                                        _F(CHARGE=PP,),),
                                                 COMP_INCR=_F(RELATION='ELAS',
                                                              DEFORMATION='GROT_GDEP',
                                                              TOUT='OUI',),
                                                 INCREMENT=_F(LIST_INST=listins,),
                                                 RECH_LINEAIRE=_F(),
                                                 CONVERGENCE=_F(RESI_GLOB_RELA=0.0001,
                             #                                   ITER_GLOB_MAXI=80,
                                                                ITER_GLOB_MAXI=1,
                                                                ARRET='NON',),
                                                 NEWTON=_F(REAC_ITER=1,),);
                             
                             
                             depl2=POST_RELEVE_T(ACTION=_F(OPERATION='EXTREMA',
                                                           INTITULE='maxdepl',
                                                           RESULTAT=resu2,
                                                           NOM_CHAM='DEPL',
                                                           NOM_CMP='DZ',),);
                             
                             deplt=depl2.EXTR_TABLE()
                             depltv=deplt.VALE
                             print 5*'\n'+'Valeur du deplacement '+str(depltv[6])+5*'\n'
                             #the constraint should be >0
                             #so depltv<0.005 -> depl-0.005<0 -> depl/0.005-1>0
                             print 'Valeur de la contrainte '+(str(depltv[6]/0.005-1));
                             DETRUIRE(INFO=1,CONCEPT=_F(NOM=(tracbord,resu2,depl2),),);
                             return depltv[6]/0.005-1

#fonction objective
def astobj(x):
                             print 'Valeur de l objectif '+str(2*x[1]**2+3*x[0]**2)
                             return 2*x[1]**2+3*x[0]**2

#test of function
#x=[0.5,0.5]
#astconst(x)
#astobj(x)
#astconst(x)

#out=fmin_cobyla(astobj, [0.5, 0.5], [astconst])
out=fmin_cobyla(astobj, [0.5, 0.5], [astconst],maxfun=3)
print "out value"
print out

FIN();
